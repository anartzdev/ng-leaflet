{
    "pipes": [],
    "interfaces": [
        {
            "name": "IBaseLayer",
            "id": "interface-IBaseLayer-a4bd6243bbfa2156ae13894296a3dd09ecc920595e1171687bf40dbf4349193624cbbbd223a14c488b7c80648e73c991f1896bb3d695d985962291f9cfb01571",
            "file": "projects/mugan86/ng-leaflet/src/lib/models/controls.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ControlPosition } from \"leaflet\";\n\nexport interface IScaleOptions {\n    show?: boolean;\n    position?: ControlPosition;\n    maxWidth?: number;\n    metric?: boolean;\n    imperial?: boolean;\n    /**\n     * If true, the control is updated on moveend, otherwise it's always \n     * up-to-date (updated on move). Default: false\n    */\n    updateWhenIdle?: boolean | undefined;\n}\n\nexport interface ILayers {\n    baseLayers: Array<IBaseLayer>;\n    overLayers?: Array<IOverLayer>\n}\n\nexport interface IBaseLayer {\n    label: string;\n    map: string;\n    atribution: string;\n    default?: boolean\n}\n\nexport interface IOverLayer {\n    label: string;\n    map: string;\n    select: boolean\n}\n\nexport interface IZoomOptions {\n    zoomInTitle?: string;\n    zoomOutTitle?: string;\n    position?: ControlPosition;\n    default?: number;\n}\n\nexport interface IWatermarkOptions {\n    img?: string;\n    border?: boolean;\n    position?: ControlPosition;\n    size?: string;\n    borderColor?: string;\n    show?: boolean;\n}",
            "properties": [
                {
                    "name": "atribution",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "default",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "map",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IConfigMap",
            "id": "interface-IConfigMap-2b513e70a63f1a737fd30f04fcdcc7f576535714144c313778defbf5b1f11aed976e08cfb60507247a4400428e6d3e6806475c4733604fd92e7855ae7f20d14a",
            "file": "projects/mugan86/ng-leaflet/src/lib/models/config-map.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ILayers, IScaleOptions, IWatermarkOptions, IZoomOptions } from \"./controls\";\n\nexport interface IConfigMap {\n    center?: [number, number];\n    scale?: IScaleOptions | undefined;\n    layers?: ILayers;\n    zoom?: IZoomOptions;\n    fullscreen?: boolean;\n    watermark?: IWatermarkOptions;\n    fitBounds?: boolean;\n}\n\nexport interface ISizeMap {\n    width: string;\n    height: string;\n}",
            "properties": [
                {
                    "name": "center",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "fitBounds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "fullscreen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "layers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILayers",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "scale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IScaleOptions | undefined",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "watermark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IWatermarkOptions",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "zoom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IZoomOptions",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ILayers",
            "id": "interface-ILayers-a4bd6243bbfa2156ae13894296a3dd09ecc920595e1171687bf40dbf4349193624cbbbd223a14c488b7c80648e73c991f1896bb3d695d985962291f9cfb01571",
            "file": "projects/mugan86/ng-leaflet/src/lib/models/controls.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ControlPosition } from \"leaflet\";\n\nexport interface IScaleOptions {\n    show?: boolean;\n    position?: ControlPosition;\n    maxWidth?: number;\n    metric?: boolean;\n    imperial?: boolean;\n    /**\n     * If true, the control is updated on moveend, otherwise it's always \n     * up-to-date (updated on move). Default: false\n    */\n    updateWhenIdle?: boolean | undefined;\n}\n\nexport interface ILayers {\n    baseLayers: Array<IBaseLayer>;\n    overLayers?: Array<IOverLayer>\n}\n\nexport interface IBaseLayer {\n    label: string;\n    map: string;\n    atribution: string;\n    default?: boolean\n}\n\nexport interface IOverLayer {\n    label: string;\n    map: string;\n    select: boolean\n}\n\nexport interface IZoomOptions {\n    zoomInTitle?: string;\n    zoomOutTitle?: string;\n    position?: ControlPosition;\n    default?: number;\n}\n\nexport interface IWatermarkOptions {\n    img?: string;\n    border?: boolean;\n    position?: ControlPosition;\n    size?: string;\n    borderColor?: string;\n    show?: boolean;\n}",
            "properties": [
                {
                    "name": "baseLayers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<IBaseLayer>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "overLayers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<IOverLayer>",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IMarker",
            "id": "interface-IMarker-2decf058e37b81c72b2e570c82118b0d071304bb38751012e186c29e9296e66348b1c2b1dfefdfc20ad379455d46af7ea64b8baf4d36d4b0b980e1964dace2cf",
            "file": "projects/mugan86/ng-leaflet/src/lib/models/marker.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Point } from \"leaflet\";\n\nexport interface IMarker {\n    position: { lat: number; lng: number};\n    draggable?: boolean;\n    popup?: {\n        content: string;\n        options?: {\n            offset: Point;\n            maxWidth: number;\n            minWidth: number;\n            closeButton: boolean;\n        }\n    }\n}",
            "properties": [
                {
                    "name": "draggable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "popup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IOverLayer",
            "id": "interface-IOverLayer-a4bd6243bbfa2156ae13894296a3dd09ecc920595e1171687bf40dbf4349193624cbbbd223a14c488b7c80648e73c991f1896bb3d695d985962291f9cfb01571",
            "file": "projects/mugan86/ng-leaflet/src/lib/models/controls.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ControlPosition } from \"leaflet\";\n\nexport interface IScaleOptions {\n    show?: boolean;\n    position?: ControlPosition;\n    maxWidth?: number;\n    metric?: boolean;\n    imperial?: boolean;\n    /**\n     * If true, the control is updated on moveend, otherwise it's always \n     * up-to-date (updated on move). Default: false\n    */\n    updateWhenIdle?: boolean | undefined;\n}\n\nexport interface ILayers {\n    baseLayers: Array<IBaseLayer>;\n    overLayers?: Array<IOverLayer>\n}\n\nexport interface IBaseLayer {\n    label: string;\n    map: string;\n    atribution: string;\n    default?: boolean\n}\n\nexport interface IOverLayer {\n    label: string;\n    map: string;\n    select: boolean\n}\n\nexport interface IZoomOptions {\n    zoomInTitle?: string;\n    zoomOutTitle?: string;\n    position?: ControlPosition;\n    default?: number;\n}\n\nexport interface IWatermarkOptions {\n    img?: string;\n    border?: boolean;\n    position?: ControlPosition;\n    size?: string;\n    borderColor?: string;\n    show?: boolean;\n}",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "map",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "select",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IScaleOptions",
            "id": "interface-IScaleOptions-a4bd6243bbfa2156ae13894296a3dd09ecc920595e1171687bf40dbf4349193624cbbbd223a14c488b7c80648e73c991f1896bb3d695d985962291f9cfb01571",
            "file": "projects/mugan86/ng-leaflet/src/lib/models/controls.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ControlPosition } from \"leaflet\";\n\nexport interface IScaleOptions {\n    show?: boolean;\n    position?: ControlPosition;\n    maxWidth?: number;\n    metric?: boolean;\n    imperial?: boolean;\n    /**\n     * If true, the control is updated on moveend, otherwise it's always \n     * up-to-date (updated on move). Default: false\n    */\n    updateWhenIdle?: boolean | undefined;\n}\n\nexport interface ILayers {\n    baseLayers: Array<IBaseLayer>;\n    overLayers?: Array<IOverLayer>\n}\n\nexport interface IBaseLayer {\n    label: string;\n    map: string;\n    atribution: string;\n    default?: boolean\n}\n\nexport interface IOverLayer {\n    label: string;\n    map: string;\n    select: boolean\n}\n\nexport interface IZoomOptions {\n    zoomInTitle?: string;\n    zoomOutTitle?: string;\n    position?: ControlPosition;\n    default?: number;\n}\n\nexport interface IWatermarkOptions {\n    img?: string;\n    border?: boolean;\n    position?: ControlPosition;\n    size?: string;\n    borderColor?: string;\n    show?: boolean;\n}",
            "properties": [
                {
                    "name": "imperial",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "maxWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "metric",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControlPosition",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "show",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "updateWhenIdle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | undefined",
                    "optional": true,
                    "description": "<p>If true, the control is updated on moveend, otherwise it&#39;s always\nup-to-date (updated on move). Default: false</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nIf true, the control is updated on moveend, otherwise it's always\nup-to-date (updated on move). Default: false\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ISizeMap",
            "id": "interface-ISizeMap-2b513e70a63f1a737fd30f04fcdcc7f576535714144c313778defbf5b1f11aed976e08cfb60507247a4400428e6d3e6806475c4733604fd92e7855ae7f20d14a",
            "file": "projects/mugan86/ng-leaflet/src/lib/models/config-map.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ILayers, IScaleOptions, IWatermarkOptions, IZoomOptions } from \"./controls\";\n\nexport interface IConfigMap {\n    center?: [number, number];\n    scale?: IScaleOptions | undefined;\n    layers?: ILayers;\n    zoom?: IZoomOptions;\n    fullscreen?: boolean;\n    watermark?: IWatermarkOptions;\n    fitBounds?: boolean;\n}\n\nexport interface ISizeMap {\n    width: string;\n    height: string;\n}",
            "properties": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ITilerLayerOptions",
            "id": "interface-ITilerLayerOptions-2566ae0169b4306f1ac19c13248b9777818adf41222af11998afc68b1e2ac24c46bd160f3eb741471e7658f69370680c7106277347247838cceaa424ee3a8193",
            "file": "projects/mugan86/ng-leaflet/src/lib/models/tile-layer-options.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITilerLayerOptions {\n    minZoom?: number;\n    maxZoom?: number;\n    subdomains?: string | string[];\n    errorTileUrl?: string;\n    zoomOffset?: number;\n    tms?: boolean;\n    zoomReverse?: boolean;\n    detectRetina?: boolean;\n    crossOrigin?: boolean | string;\n    layers?: string;\n    format?: string;\n    transparent?: boolean;\n    attribution?: string;\n}",
            "properties": [
                {
                    "name": "attribution",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "crossOrigin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "detectRetina",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "errorTileUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "format",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "layers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "maxZoom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "minZoom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "subdomains",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "tms",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "transparent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "zoomOffset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "zoomReverse",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IWatermarkOptions",
            "id": "interface-IWatermarkOptions-a4bd6243bbfa2156ae13894296a3dd09ecc920595e1171687bf40dbf4349193624cbbbd223a14c488b7c80648e73c991f1896bb3d695d985962291f9cfb01571",
            "file": "projects/mugan86/ng-leaflet/src/lib/models/controls.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ControlPosition } from \"leaflet\";\n\nexport interface IScaleOptions {\n    show?: boolean;\n    position?: ControlPosition;\n    maxWidth?: number;\n    metric?: boolean;\n    imperial?: boolean;\n    /**\n     * If true, the control is updated on moveend, otherwise it's always \n     * up-to-date (updated on move). Default: false\n    */\n    updateWhenIdle?: boolean | undefined;\n}\n\nexport interface ILayers {\n    baseLayers: Array<IBaseLayer>;\n    overLayers?: Array<IOverLayer>\n}\n\nexport interface IBaseLayer {\n    label: string;\n    map: string;\n    atribution: string;\n    default?: boolean\n}\n\nexport interface IOverLayer {\n    label: string;\n    map: string;\n    select: boolean\n}\n\nexport interface IZoomOptions {\n    zoomInTitle?: string;\n    zoomOutTitle?: string;\n    position?: ControlPosition;\n    default?: number;\n}\n\nexport interface IWatermarkOptions {\n    img?: string;\n    border?: boolean;\n    position?: ControlPosition;\n    size?: string;\n    borderColor?: string;\n    show?: boolean;\n}",
            "properties": [
                {
                    "name": "border",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "borderColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "img",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControlPosition",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "show",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 45
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IZoomOptions",
            "id": "interface-IZoomOptions-a4bd6243bbfa2156ae13894296a3dd09ecc920595e1171687bf40dbf4349193624cbbbd223a14c488b7c80648e73c991f1896bb3d695d985962291f9cfb01571",
            "file": "projects/mugan86/ng-leaflet/src/lib/models/controls.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ControlPosition } from \"leaflet\";\n\nexport interface IScaleOptions {\n    show?: boolean;\n    position?: ControlPosition;\n    maxWidth?: number;\n    metric?: boolean;\n    imperial?: boolean;\n    /**\n     * If true, the control is updated on moveend, otherwise it's always \n     * up-to-date (updated on move). Default: false\n    */\n    updateWhenIdle?: boolean | undefined;\n}\n\nexport interface ILayers {\n    baseLayers: Array<IBaseLayer>;\n    overLayers?: Array<IOverLayer>\n}\n\nexport interface IBaseLayer {\n    label: string;\n    map: string;\n    atribution: string;\n    default?: boolean\n}\n\nexport interface IOverLayer {\n    label: string;\n    map: string;\n    select: boolean\n}\n\nexport interface IZoomOptions {\n    zoomInTitle?: string;\n    zoomOutTitle?: string;\n    position?: ControlPosition;\n    default?: number;\n}\n\nexport interface IWatermarkOptions {\n    img?: string;\n    border?: boolean;\n    position?: ControlPosition;\n    size?: string;\n    borderColor?: string;\n    show?: boolean;\n}",
            "properties": [
                {
                    "name": "default",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ControlPosition",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "zoomInTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "zoomOutTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AppService",
            "id": "injectable-AppService-7d3fc5581d4790160cb791a3cf33c72b15236fbe6a447b03d547c1f59cf80382a8c89765c77f510839f3eb9ad4594b4808d80fa4d7813f3916ec2397f04c7053",
            "file": "src/app/app.service.ts",
            "properties": [
                {
                    "name": "examples",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppService {\n  examples = [];\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "BaseMap",
            "id": "class-BaseMap-c4f5376abb8148e0529db09a2f8cb59ec3cee2cbeb1c229417e6ce3534c40cdd69999bd824c950b84dcb7611558e91a4c07c3d25a57ce7803c877dcf8e690626",
            "file": "projects/mugan86/ng-leaflet/src/lib/services/map.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Map } from 'leaflet';\nimport { tileLayerSelect } from '../config/tile-layers/helpers';\nimport { tileLayers } from '../config/tile-layers/ui';\nimport { IConfigMap } from '../models/config-map';\nimport { IMarker } from '../models/marker';\n\nexport class BaseMap {\n    private map!: Map;\n    private mapId = 'map';\n    private center!: [number, number];\n    private zoom = true;\n    private zoomValue?: number;\n    constructor(config?: IConfigMap, mapId?: string) {\n        this.center = config && config!!.center || [43.1824528,-2.3878554];\n        this.mapId = (mapId) || 'map'\n        this.zoom = config && (config!!.zoom) ? false: true;\n        this.zoomValue = config && config?.zoom?.default || 12;\n        this.init(config!!);\n    }\n\n    /**\n     * Init map with set configurations\n     */\n    private init(config: IConfigMap): void {\n        this.map = new Map(this.mapId, {\n            zoomControl: this.zoom\n        }).setView(this.center, this.zoomValue);\n\n        if (!config || !config.layers) {\n            tileLayerSelect(tileLayers.baseLayers.default.map, {\n                attribution: tileLayers.baseLayers.default.atribution\n            }).addTo(this.map)\n        }\n    }\n    get = () => this.map;\n\n    /**\n     * Place camera centering and zooming with location points\n     * @param markers Location point to center /adjust zoom using all points\n     */\n    fitBounds(markers: Array<IMarker>) {\n        this.get().fitBounds([\n            ...markers.map((point) => [point.position.lat, point.position.lng] as [number, number]),\n        ]);\n    }    \n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "IConfigMap",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "mapId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "IConfigMap",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mapId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "center",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "get",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "map",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "mapId",
                    "defaultValue": "'map'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "zoom",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "zoomValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "fitBounds",
                    "args": [
                        {
                            "name": "markers",
                            "type": "Array<IMarker>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPlace camera centering and zooming with location points\n",
                    "description": "<p>Place camera centering and zooming with location points</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1308,
                                "end": 1315,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "markers"
                            },
                            "type": "Array<IMarker>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1302,
                                "end": 1307,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Location point to center /adjust zoom using all points</p>\n"
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "config",
                            "type": "IConfigMap",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInit map with set configurations\n",
                    "description": "<p>Init map with set configurations</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IConfigMap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Controls",
            "id": "class-Controls-c44a3a45e4783fd0a1a41ccbd7dcfa1b3775750284c7d0ba4a9f3fa8fce29b799257fb2d073265ec0e05d2d2212e42ce3871eec868328a63cc1b66464aaba3a0",
            "file": "projects/mugan86/ng-leaflet/src/lib/services/controls.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { control, ControlPosition, Map } from 'leaflet';\nimport { tileLayerSelect } from '../config/tile-layers/helpers';\nimport { IBaseLayer, IOverLayer, ILayers, IScaleOptions, IZoomOptions, IWatermarkOptions } from '../models/controls'\nimport { fullScreenMap } from '../plugins/controls/full-screen-map';\nimport { watermark } from '../plugins/controls/watermark';\nclass Controls {\n\n    static changeZoomConfig(map: Map, config?: IZoomOptions) {\n        control.zoom({\n            zoomInTitle: config!!.zoomInTitle || 'Zoom in',\n            zoomOutTitle: config!!.zoomOutTitle || 'Zoom out',\n            position: config!!.position || 'topleft'\n        }).addTo(map);\n    }\n    static addScale(map: Map, config?: IScaleOptions) {\n        delete config!.show;\n        // Add Scale control after remove show property that not include in config options\n        control.scale(config).addTo(map);\n    }\n\n    /**\n     * Generate layers control to available users want differente layers\n     * to use in maps.\n     * @param map Map instantiate object when add control layers\n     * @param layers Layers with base and overlayers to add in map\n     * @param position control position in map\n     */\n    static addBaseOverLayers(map: Map, layers: ILayers, position: ControlPosition = 'topright') {\n        if (!layers.baseLayers) {\n            throw new Error(\"Need to add Base Layers\");\n        }\n\n        if (layers.baseLayers.length < 2) {\n            console.warn(\"Take advantage of at least two base layers to take advantage of this feature\")\n        }\n\n        // Layers controls\n        control.layers(\n            this.groupBaseLayers(\n                layers.baseLayers, map),\n            (layers.overLayers) && this.groupOverLayers(layers.overLayers, map), {\n            position\n        }).addTo(map);\n    }\n\n    private static groupBaseLayers(layers: Array<IBaseLayer>, map: Map) {\n\n        const findDefaultLayerConfig = layers.find((layer) => layer.default)\n        const defaultLayer = tileLayerSelect(findDefaultLayerConfig!!.map, {\n            attribution: findDefaultLayerConfig!!.atribution\n        }).addTo(map);\n\n        return layers.reduce((a, layer) => {\n            return (!layer.default) ? ({ // Add NO default layers\n                ...a, [layer.label]: tileLayerSelect(layer.map, {\n                    attribution: layer.atribution\n                })\n            }) : {\n                ...a, ...{ [layer.label]: defaultLayer } // Map Default select layer\n            }\n        }, {} // Start value\n        );\n\n    }\n\n    private static groupOverLayers(layers: Array<IOverLayer>, map: Map) {\n        return layers.reduce((a, layer) => ({\n            ...a, [layer.label]: (layer.select) ?\n                tileLayerSelect(layer.map).addTo(map) :\n                tileLayerSelect(layer.map)\n        }), {});\n    }\n\n    static activeFullScreen(map: Map, position?: ControlPosition) {\n        fullScreenMap({\n            position: (position) || 'topleft'\n        }).addTo(map)\n    }\n\n    static activeWatermark(map: Map, config: IWatermarkOptions) {\n        delete config.show;\n        watermark(config).addTo(map)\n    }\n\n    \n}\n\nexport { Controls }",
            "properties": [],
            "methods": [
                {
                    "name": "activeFullScreen",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "position",
                            "type": "ControlPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "position",
                            "type": "ControlPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "activeWatermark",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "IWatermarkOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "IWatermarkOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addBaseOverLayers",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "layers",
                            "type": "ILayers",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "position",
                            "type": "ControlPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'topright'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGenerate layers control to available users want differente layers\nto use in maps.\n",
                    "description": "<p>Generate layers control to available users want differente layers\nto use in maps.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1019,
                                "end": 1022,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "map"
                            },
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1013,
                                "end": 1018,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Map instantiate object when add control layers</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1084,
                                "end": 1090,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "layers"
                            },
                            "type": "ILayers",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1078,
                                "end": 1083,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Layers with base and overlayers to add in map</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1151,
                                "end": 1159,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "position"
                            },
                            "type": "ControlPosition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'topright'",
                            "tagName": {
                                "pos": 1145,
                                "end": 1150,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>control position in map</p>\n"
                        }
                    ]
                },
                {
                    "name": "addScale",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "IScaleOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "IScaleOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeZoomConfig",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "IZoomOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "IZoomOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "groupBaseLayers",
                    "args": [
                        {
                            "name": "layers",
                            "type": "Array<IBaseLayer>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "layers",
                            "type": "Array<IBaseLayer>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "groupOverLayers",
                    "args": [
                        {
                            "name": "layers",
                            "type": "Array<IOverLayer>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "layers",
                            "type": "Array<IOverLayer>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LeafletMap",
            "id": "class-LeafletMap-015df0247e56e45c3cf24a597d798ee16f99b7467b55da78c223e7ea0cfca85bcf3d9ef2858293f7b6fe50b6badce95bb62c1541abe62a11a3b918c23ba38ef5",
            "file": "projects/mugan86/ng-leaflet/src/lib/services/ng-leaflet-map.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IConfigMap } from \"../models/config-map\";\nimport { BaseMap } from \"./map\"\n\nclass LeafletMap extends BaseMap {\n    constructor(config?: IConfigMap, mapId?: string) {\n        super(config, mapId);\n    }\n}\n\nexport { LeafletMap };",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "IConfigMap",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "mapId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "IConfigMap",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mapId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "center",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseMap"
                    }
                },
                {
                    "name": "get",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "BaseMap"
                    }
                },
                {
                    "name": "map",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseMap"
                    }
                },
                {
                    "name": "mapId",
                    "defaultValue": "'map'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseMap"
                    }
                },
                {
                    "name": "zoom",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseMap"
                    }
                },
                {
                    "name": "zoomValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseMap"
                    }
                }
            ],
            "methods": [
                {
                    "name": "fitBounds",
                    "args": [
                        {
                            "name": "markers",
                            "type": "Array<IMarker>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPlace camera centering and zooming with location points\n",
                    "description": "<p>Place camera centering and zooming with location points</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1308,
                                "end": 1315,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "markers"
                            },
                            "type": "Array<IMarker>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1302,
                                "end": 1307,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Location point to center /adjust zoom using all points</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMap"
                    }
                },
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "config",
                            "type": "IConfigMap",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInit map with set configurations\n",
                    "description": "<p>Init map with set configurations</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IConfigMap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseMap"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseMap",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Markers",
            "id": "class-Markers-14da98563ed21e4e07d1b17c08c9130acd5141c2b8bd4872cf5988d9d65cd103b4b06093201f852719ff67e49a6f12c2d5a724fa0df6f1ec1cb6a3ef63d88120",
            "file": "projects/mugan86/ng-leaflet/src/lib/services/markers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Map, marker } from \"leaflet\";\nimport { IMarker } from \"../models/marker\";\n\nclass Markers {\n\n    /**\n     * Add Markers in map to view different locations\n     * @param markers collection to location points (lat, lng)\n     */\n    static add(map: Map, markers: Array<IMarker> = [], random: boolean = false) {\n        if (markers.length === 1 && !random) {\n            marker([markers[0].position.lat, markers[0].position.lng]).addTo(map);\n            return;\n        }\n        if (random) {\n            markers = Markers.randomValues(map);\n        }\n        markers.map((markerItem) => {\n            const markerElement = marker([markerItem.position.lat, markerItem.position.lng],{\n                draggable: markerItem.draggable\n            }).addTo(map);\n            (markerItem.popup) && markerElement.bindPopup(markerItem.popup.content);\n        });\n    }\n\n    static randomValues(map: Map) {\n        const bounds = map.getBounds();\n\n        const southWest = bounds.getSouthWest();\n        const northEast = bounds.getNorthEast();\n        const lngSpan = northEast.lng - southWest.lng;\n        const latSpan = northEast.lat - southWest.lat;\n\n        let allPoints = [];\n\n        // generate random points and add to array 'allPoints'\n        for (let i = 0; i < 30; i++) {\n            allPoints.push({\n                position: {\n                    lat: southWest.lat + latSpan * Math.random(),\n                    lng: southWest.lng + lngSpan * Math.random(),\n                }\n            });\n        }\n        return allPoints;\n    }\n\n    /**\n     * Pending to implement\n     */\n    static addWithCluster() { }\n}\n\nexport { Markers };",
            "properties": [],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "markers",
                            "type": "Array<IMarker>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        },
                        {
                            "name": "random",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd Markers in map to view different locations\n",
                    "description": "<p>Add Markers in map to view different locations</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": {
                                "pos": 177,
                                "end": 184,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "markers"
                            },
                            "type": "Array<IMarker>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "pos": 171,
                                "end": 176,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>collection to location points (lat, lng)</p>\n"
                        },
                        {
                            "name": "random",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addWithCluster",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPending to implement\n",
                    "description": "<p>Pending to implement</p>\n",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "randomValues",
                    "args": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "map",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-8b02b9335384656aae3a75b29856e8c38612410d0c07a0b417ac729ebd8e6b4e224ee6427bbdc13494e627e117cb59b0cf67e2830a5abe543b64e902d3a23416",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "items",
                    "defaultValue": "Array(50).fill({\n    item: \"banana\"\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "option",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "size",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "snippet1",
                    "defaultValue": "appModule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "title",
                    "defaultValue": "'angular-leaflet'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "selectOption",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { IConfigMap, tileLayers } from '@mugan86/ng-leaflet';\nimport { appModule } from './configurations';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'angular-leaflet';\n  option = 0;\n  items = Array(50).fill({\n    item: \"banana\"\n  });\n  snippet1 = appModule;\n\n  size = undefined;\n\n  /*markers = [\n    {\n      lat: 51.5, lng: -0.09\n    },\n    {\n      lat: 52.5, lng: -0.19\n    }\n  ];\n  // markers = [];\n  configMap: IConfigMap = {\n    fullscreen: true,\n    layers: {\n      baseLayers: [\n        {\n          label: 'Default',\n          map: tileLayers.baseLayers.default.map,\n          atribution: tileLayers.baseLayers.default.atribution,\n          default: true\n        },\n        {\n          label: 'CycloOSM',\n          map: tileLayers.baseLayers.cycloOsm.map,\n          atribution: tileLayers.baseLayers.cycloOsm.atribution\n        },\n        {\n          label: 'OSMHot',\n          map: tileLayers.baseLayers.osmHot.map,\n          atribution: tileLayers.baseLayers.osmHot.atribution\n        },\n        {\n          label: 'OSMManik',\n          map: tileLayers.baseLayers.osmManik.map,\n          atribution: tileLayers.baseLayers.osmManik.atribution\n        }],\n      overLayers: [{\n        label: 'Trail / Hiking',\n        map: tileLayers.overlayers.wayMarkedTrails.hiking,\n        select: true\n      },\n      {\n        label: 'Open Railway',\n        map: tileLayers.overlayers.openRailway,\n        select: false\n      }]\n    },\n    watermark: {\n      position: 'bottomleft',\n      size: '50px'\n    }\n    // If add zoom config (if add one property info) default zoom control remove\n    /*zoom: {\n      zoomInTitle: 'Acercar',\n      zoomOutTitle: 'Alejar'\n    }*/\n  //}*/\n\n  selectOption(id: number) {\n    this.option = id;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#map {\n    height: 600px;\n}\n\nfooter {\n    position: fixed;\n    bottom: 0;\n    width: 100%\n}",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ExampleComponent",
            "id": "component-ExampleComponent-6d8a947fa883b4be21efa19f8c7b1bb362b59d4a1f0d51bb169b04d888be8865f9fb20fb721e62eb56c827c3b4ea29896022676356805fd5dd31d6b5a1bff02a",
            "file": "src/app/pages/example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-example",
            "styleUrls": [
                "./example.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./example.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configMap",
                    "defaultValue": "{\n    fullscreen: true,\n    zoom: {\n      // position: 'bottomleft',       // 'topright', 'topleft', 'bottomleft', 'bottomright'\n      default: 18                  // Values between 4 and 20\n    },\n    watermark: {\n      // show: true\n      img: 'https://cdn4.iconfinder.com/data/icons/logos-and-brands/512/21_Angular_logo_logos-128.png',\n      // border: true,\n      //borderColor: 'red' // Use <color-name> / rgb / rgba / hexadecimal / hsl / hsla\n    },\n    fitBounds: true\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConfigMap",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "getRandomInRange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "items",
                    "defaultValue": "Array(50).fill({\n    item: \"banana\"\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "map",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "marker",
                    "defaultValue": "[{ 'lat': 43.1824528, 'lng': -2.3878554 }]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "markers",
                    "defaultValue": "[\n    {\n      position: {\n        \"lat\": 43.17757110078426,\n        \"lng\": -2.3661233885984085\n      },\n      popup: {\n        content: '<p>Hello</p>'\n      }\n    },\n    {\n      position: {\n        \"lat\": 43.177781697765305,\n        \"lng\": -2.367583962060063\n      }\n    },\n    {\n      position: {\n        \"lat\": 43.1765773404203,\n        \"lng\": -2.409942167562859\n      }\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<IMarker>",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "menusItems",
                    "defaultValue": "navigation.menus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "option",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "randomMarkers",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "snippet1",
                    "defaultValue": "appModule",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "title",
                    "defaultValue": "'angular-leaflet'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectOption",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMap",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Map",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { IConfigMap, IMarker } from '@mugan86/ng-leaflet';\nimport { LatLngBounds, rectangle } from 'leaflet';\nimport { appModule } from 'src/app/configurations';\nimport navigation from './../../../assets/menu.json';\nimport { Map } from 'leaflet';\n@Component({\n  selector: 'app-example',\n  templateUrl: './example.component.html',\n  styleUrls: ['./example.component.css']\n})\nexport class ExampleComponent implements OnInit {\n  title = 'angular-leaflet';\n  option = 0;\n  map!: Map;\n  items = Array(50).fill({\n    item: \"banana\"\n  });\n  menusItems = navigation.menus;\n  snippet1 = appModule;\n\n\n  marker = [{ 'lat': 43.1824528, 'lng': -2.3878554 }]\n  randomMarkers = true;\n\n\n  configMap: IConfigMap = {\n    fullscreen: true,\n    zoom: {\n      // position: 'bottomleft',       // 'topright', 'topleft', 'bottomleft', 'bottomright'\n      default: 18                  // Values between 4 and 20\n    },\n    watermark: {\n      // show: true\n      img: 'https://cdn4.iconfinder.com/data/icons/logos-and-brands/512/21_Angular_logo_logos-128.png',\n      // border: true,\n      //borderColor: 'red' // Use <color-name> / rgb / rgba / hexadecimal / hsl / hsla\n    },\n    fitBounds: true\n  }\n\n  markers: Array<IMarker> = [\n    {\n      position: {\n        \"lat\": 43.17757110078426,\n        \"lng\": -2.3661233885984085\n      },\n      popup: {\n        content: '<p>Hello</p>'\n      }\n    },\n    {\n      position: {\n        \"lat\": 43.177781697765305,\n        \"lng\": -2.367583962060063\n      }\n    },\n    {\n      position: {\n        \"lat\": 43.1765773404203,\n        \"lng\": -2.409942167562859\n      }\n    }\n  ];\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  getRandomInRange = (from: number, to: number, fixed = 3) => {\n    return +(Math.random() * (to - from) + from).toFixed(fixed) * 1;\n    // .toFixed() returns string, so ' * 1' is a trick to convert to number\n  };\n\n  selectOption(id: number) {\n    this.option = id;\n  }\n\n  setMap($event: Map) {\n    this.map = $event;\n    const bounds = new LatLngBounds([\n      [43.2, -2.273474],\n      [43.1736979, -2.4173475],\n    ]);\n    // Crear un rectángulo naranja a partir de los límites especificados\n    const rectangleOne = rectangle(bounds, {\n      color: \"#ff7800\",\n      weight: 1,\n      stroke: true,\n    }).addTo(this.map);\n\n    // Hacemos zoom y centramos al área que que queremos movernos\n    // Esto lo usamos si dibujamos un rectángulo, si no, usamos la ubicación inicial\n    // al crear el mapa\n    // Al estar con un rectángulo,\n    // vamos a coger la zona que ocupa haciendo un rectangulo imaginario donde obtenemos\n    // las coordenadas de arriba-izquierda, arriba-derecha, abajo-izquierda y abajo-derecha\n    // Con coger por ejemplo Norte-Este y Sur-Oeste, ya acota el rectángulo\n    this.map.fitBounds([\n      [\n        rectangleOne.getBounds().getNorthEast().lat,\n        rectangleOne.getBounds().getNorthEast().lng,\n      ],\n      [\n        rectangleOne.getBounds().getSouthWest().lat,\n        rectangleOne.getBounds().getSouthWest().lng,\n      ],\n    ]);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".scroll {\n    margin:4px, 4px;\n    padding:4px;\n    max-height: 820px;\n    overflow-x: hidden;\n    overflow: scroll;\n    text-align:justify;\n}\n\n.nav-item {\n    cursor: pointer;\n}\n\npre {\n    background-color: aliceblue;\n    padding: 15px;\n}",
                    "styleUrl": "./example.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 64
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n    <div class=\"container-fluid\">\n        <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarTogglerDemo01\"\n            aria-controls=\"navbarTogglerDemo01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarTogglerDemo01\">\n            <a class=\"navbar-brand\" href=\"#\">Angular Leaflet Map</a>\n            <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                <li class=\"nav-item\">\n                    <a class=\"nav-link active\" aria-current=\"option\" href=\"#\">Home</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"#\">Link</a>\n                </li>\n            </ul>\n        </div>\n    </div>\n</nav>\n<div class=\"container-fluid mt-3\">\n    <div class=\"container-fluid mt-3\">\n        <div class=\"row\">\n            <div class=\"col-lg-2 scroll\">\n                <ul class=\"nav flex-column\">\n                    <li class=\"nav-item\" *ngFor=\"let item of menusItems\">\n                        <a class=\"nav-link\" href=\"#\">{{ item.label }}</a>\n                    </li>\n                </ul>\n            </div>\n            <div class=\"col-lg\">\n                <ul class=\"nav nav-tabs nav-justified mb-3\">\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" (click)=\"selectOption(0)\" [ngClass]=\"{'active': option == 0}\">\n                            Preview\n                        </a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" (click)=\"selectOption(1)\" [ngClass]=\"{'active': option == 1}\">\n                            app.module.ts\n                        </a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" (click)=\"selectOption(2)\" [ngClass]=\"{'active': option == 2}\">\n                            app.component.ts\n                        </a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" (click)=\"selectOption(3)\" [ngClass]=\"{'active': option == 3}\">\n                            app.component.html\n                        </a>\n                    </li>\n                </ul>\n                <div *ngIf=\"option == 0\">\n\n                    <!--<alm-map [config]=\"configMap\" [randomMarkers] = true></alm-map>-->\n\n                    <!--<alm-map [config]=\"configMap\" [markers]=\"marker\"></alm-map>-->\n                    <ng-leaflet-map (setUpMap)=\"setMap($event)\" [config]=\"configMap\" [markers]=\"markers\">\n                    </ng-leaflet-map>\n                </div>\n                <div *ngIf=\"option == 1\">\n                    <pre>{{snippet1}}</pre>\n                </div>\n                <div *ngIf=\"option == 2\">\n                    app.component.ts\n                </div>\n                <div *ngIf=\"option == 3\">\n                    app.component.html\n                </div>\n\n            </div>\n\n        </div>\n\n\n    </div>\n    <div class=\"row\">\n        <div class=\"col-lg-2\">\n        </div>\n        <div class=\"col-lg text-center\">\n            <footer class=\"d-flex flex-wrap justify-content-between align-items-center py-3 my-4 border-top\">\n                <div class=\"col d-flex\">\n                    <span class=\"text-muted\">© 2022 Angular Leaflet Map - Anartz Mugika Ledo</span>\n                </div>\n            </footer>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "MapComponent",
            "id": "component-MapComponent-fa37f1f6ee19018246795cbeb5b55b059892256e22e6f9b97cf80a8a4ae99b4f1b740e300f8e4b881696ba5aa94ad82123cc59578d7cca67290bf5c5f2ef4761",
            "file": "src/app/pages/storybook/map/map.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-map",
            "styleUrls": [
                "./map.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./map.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "IConfigMap",
                    "decorators": []
                },
                {
                    "name": "markers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Array<IMarker>",
                    "decorators": []
                },
                {
                    "name": "randomMarkers",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "{ width: '100%', height: '600px' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "literal type",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IConfigMap, IMarker } from '@mugan86/ng-leaflet';\n\n@Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n  styleUrls: ['./map.component.css']\n})\nexport class MapComponent {\n  @Input() markers!: Array<IMarker>;\n  @Input() randomMarkers: boolean = false;\n  @Input() size: { width: string, height: string } = { width: '100%', height: '600px' }\n  @Input() config?: IConfigMap;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./map.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-leaflet-map [size]=\"size\" [markers]=\"markers\" [randomMarkers]=\"randomMarkers\" [config]=\"config\">\n</ng-leaflet-map>\n"
        },
        {
            "name": "MapComponent",
            "id": "component-MapComponent-39256191001c297a2e8df29d4dee06a7fa025da6ae82445ebf5ca14b0c2043f3863d9e487e2431566c5c5ee726327e78b1af77924287402a31f94d68fbcf6e92-1",
            "file": "projects/mugan86/ng-leaflet/src/lib/components/map/map.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ng-leaflet-map",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./map.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUse map differents configurations to custom\n",
                    "description": "<p>Use map differents configurations to custom</p>\n",
                    "line": 40,
                    "type": "IConfigMap",
                    "decorators": []
                },
                {
                    "name": "mapId",
                    "defaultValue": "'map'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 708,
                            "end": 721,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 709,
                                "end": 717,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nAssign map ID that need is unique and not duplicate\n\n",
                    "description": "<p>Assign map ID that need is unique and not duplicate</p>\n",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "markers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMarkers\n",
                    "description": "<p>Markers</p>\n",
                    "line": 18,
                    "type": "Array<IMarker>",
                    "decorators": []
                },
                {
                    "name": "randomMarkers",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 787,
                            "end": 800,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 788,
                                "end": 796,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 903,
                            "end": 916,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 904,
                                "end": 912,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nSpecify use Map size to working map\n\n",
                    "description": "<p>Specify use Map size to working map</p>\n",
                    "line": 36,
                    "type": "ISizeMap",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "setUpMap",
                    "defaultValue": "new EventEmitter<MapObject>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUse the loading state to indicate that the data Avatar needs is still loading.\n",
                    "description": "<p>Use the loading state to indicate that the data Avatar needs is still loading.</p>\n",
                    "line": 44,
                    "type": "EventEmitter<MapObject>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "map",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { IMarker, IConfigMap } from './../../models';\nimport { Controls } from '../../services/controls';\nimport { Markers } from './../../services/markers';\nimport { LeafletMap as Map } from './../../services/ng-leaflet-map.service';\nimport { Map as MapObject } from 'leaflet';\nimport { ISizeMap } from '../../models/config-map';\n@Component({\n  selector: 'ng-leaflet-map',\n  templateUrl: './map.component.html',\n  styles: [\n  ]\n})\nexport class MapComponent implements AfterViewInit {\n  /**\n   * Markers\n   */\n  @Input() markers!: Array<IMarker>;\n  /**\n   * Assign map ID that need is unique and not duplicate\n   * \n   * @required\n   */\n  @Input() mapId = 'map';\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input() randomMarkers: boolean = false;\n  /**\n   * Specify use Map size to working map\n   *\n   * @required\n   */\n  @Input() size!: ISizeMap;\n  /**\n   * Use map differents configurations to custom\n   */\n  @Input() config?: IConfigMap;\n  /**\n    Use the loading state to indicate that the data Avatar needs is still loading.\n    */\n  @Output() setUpMap: EventEmitter<MapObject> = new EventEmitter<MapObject>();\n  private map!: Map;\n\n  ngOnInit() {\n    this.size = (this.size) || {\n      width: '100%',\n      height: '500px'\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.map = new Map(this.config || undefined, this.mapId || undefined);\n    this.markers && (this.markers.length) && Markers.add(this.map.get(), this.markers);\n    this.randomMarkers && Markers.add(this.map.get(), [], this.randomMarkers);\n    this.markers && this.markers.length && this.config?.fitBounds && this.map.fitBounds(this.markers);\n    this.config!! && this.setControls();\n    this.setUpMap.emit(this.map.get());\n  }\n\n  setControls() {\n    this.config!!.scale && Controls.addScale(this.map.get(), this.config?.scale);\n    this.config!!.layers && Controls.addBaseOverLayers(this.map.get(), this.config!!.layers);\n    this.config!!.zoom && Controls.changeZoomConfig(this.map.get(), this.config?.zoom);\n    this.config!!.fullscreen && Controls.activeFullScreen(this.map.get());\n    this.config!!.watermark && Controls.activeWatermark(this.map.get(), this.config!!.watermark);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "AfterViewInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "MapComponent-1",
            "templateData": "<div [id]=\"mapId\" [ngStyle]=\"size\"></div>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-7a9c320639a1b76597de4a1c88cc1d76b134e683e55cbbe46145d9982f352d520798a00e8e60ce21da39c22710ecdf85a9aaad5325d8a6c2f01ddd90a5d79d2f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-25a9b23b942fcc33ced73ba366e98c6a59c035785f7771aca0966e7e9c60ddeb6c7274d713e1b5cc83532bdd5e30d17ba7bb238a738d726e4760cee9af5ea9ad",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: 'example/:page',\n    loadChildren: () => \"import('./pages/example/example.module').then(m => m.ExampleModule)\"\n  },\n  {\n    path: 'storybook',\n    loadChildren: () => \"import('./pages/storybook/map/map.module').then(m => m.MapModule)\"\n  },\n  {\n    path: '**',\n    redirectTo: 'storybook',\n    pathMatch: 'full',\n  },\n];\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, {\n      useHash: true,\n      scrollPositionRestoration: 'enabled',\n    }),\n  ],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ExampleModule",
            "id": "module-ExampleModule-81f547a9b29f3970586fa33ed69809708c54ee94350ca1c1c1a09e8cbe490a167987b2ac4c6fab2e1bc7203e46bc31903eb95e2d2cd67065b31db89b205d1903",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/example/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ExampleRoutingModule } from './example-routing.module';\nimport { ExampleComponent } from './example.component';\nimport { NgLeafletModule } from '@mugan86/ng-leaflet';\nimport { BrowserModule } from '@angular/platform-browser';\n\n\n@NgModule({\n  declarations: [\n    ExampleComponent\n  ],\n  imports: [\n    CommonModule,\n    ExampleRoutingModule,\n    NgLeafletModule\n  ]\n})\nexport class ExampleModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ExampleRoutingModule"
                        },
                        {
                            "name": "NgLeafletModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ExampleRoutingModule",
            "id": "module-ExampleRoutingModule-a860175c6ed3e53e3d1a7ff1384265006429c895884fc5ab42e333e1cb4ba3039a6c6f164b60e1e1b930a9e2a0257079064c240efbf97bcc0c8babf2180a0cae",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/example/example-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ExampleComponent } from './example.component';\n\nconst routes: Routes = [{\n  path: '',\n  component: ExampleComponent\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ExampleRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MapBasicModule",
            "id": "module-MapBasicModule-0a9b047fc1ea18cc4e6f7b69f905c15b26acf9ee9f0e8b87b3f02a3d680f84fd20f31d562fb3602e4af80a141e7745037b8b2699e97ab90d0db8ea2e801bc0b3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/mugan86/ng-leaflet/src/lib/components/map/map.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MapComponent } from './map.component';\n\n@NgModule({\n  declarations: [\n    MapComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    MapComponent\n  ]\n})\nexport class MapBasicModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MapComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MapModule",
            "id": "module-MapModule-431096ab0f23214b43c9b87c05a795ae923d7e81ec671ea16f218f61d8db3b22d8b114ca5ae0fbcfb0a687b6d86796ca17ce5cca890171f2821bdb01dd4c6344",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/storybook/map/map.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MapRoutingModule } from './map-routing.module';\nimport { MapComponent } from './map.component';\nimport { NgLeafletModule } from '@mugan86/ng-leaflet';\n\n\n@NgModule({\n  declarations: [\n    MapComponent\n  ],\n  imports: [\n    CommonModule,\n    MapRoutingModule,\n    NgLeafletModule\n  ]\n})\nexport class MapModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MapComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MapRoutingModule"
                        },
                        {
                            "name": "NgLeafletModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MapRoutingModule",
            "id": "module-MapRoutingModule-0de9fdf1ece521da2d59e0f39f5836185743c2c7c6f2be8b8d7256de1e91791077c5dccaee90420e1214741d51139c591291f503814d905d2e95f62692c2a20c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/storybook/map/map-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MapComponent } from './map.component';\n\nconst routes: Routes = [{\n  path: '',\n  component: MapComponent\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class MapRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgLeafletModule",
            "id": "module-NgLeafletModule-3f067e6bfbf021a8fe9af9ec54948de81d8ca2484bb52c9a1f3f1400fcd0bdaad9f173f7babcbda093892ccb9f36d2bc8d465edbe5a607d5d4193662b14977fd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/mugan86/ng-leaflet/src/lib/ng-leaflet.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { MapBasicModule } from './components/map/map.module';\n\n@NgModule({\n  declarations: [\n  ],\n  imports: [\n    MapBasicModule\n  ],\n  exports: [\n    MapBasicModule\n  ]\n})\nexport class NgLeafletModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MapBasicModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MapBasicModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "appModule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/configurations/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n  import { NgLeafletModule } from '@mugan86/ng-leaflet';\n  import { NgModule } from '@angular/core';\n  import { BrowserModule } from '@angular/platform-browser';\n  \n  import { AppComponent } from './app.component';\n  \n  @NgModule({\n    declarations: [\n      AppComponent\n    ],\n    imports: [\n      BrowserModule,\n      NgLeafletModule\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n  })\n  export class AppModule { }`"
            },
            {
                "name": "ATRIBUTIONS_LIST",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/mugan86/ng-leaflet/src/lib/config/tile-layers/ui.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    CartoDb:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n    CyclOSM:\n        '<a href=\"https://github.com/cyclosm/cyclosm-cartocss-style/releases\" title=\"CyclOSM - Open Bicycle render\">CyclOSM</a> | Map data: &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    EsriWorldImagery:\n        'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',\n    EsriWorldTopoMap:\n        'Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ, TomTom, Intermap, iPC, USGS, FAO, NPS, NRCAN, GeoBase, Kadaster NL, Ordnance Survey, Esri Japan, METI, Esri China (Hong Kong), and the GIS User Community',\n    OSM: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    OSMHot:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, Tiles style by <a href=\"https://www.hotosm.org/\" target=\"_blank\">Humanitarian OpenStreetMap Team</a> hosted by <a href=\"https://openstreetmap.fr/\" target=\"_blank\">OpenStreetMap France</a>',\n    OpenTopo:\n        'Map data: &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | Map style: &copy; <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)',\n    Stadia:\n        '&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\n    USGS: 'Tiles courtesy of the <a href=\"https://usgs.gov/\">U.S. Geological Survey</a>',\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/mugan86/ng-leaflet/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/stories/01-Basic/A-Map.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "fullScreenMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/mugan86/ng-leaflet/src/lib/plugins/controls/full-screen-map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(options?: {\n    position?: ControlPosition, entryText?: string, exitText?: string\n}) => new FullScreenMap(options)"
            },
            {
                "name": "FullScreenMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/mugan86/ng-leaflet/src/lib/plugins/controls/full-screen-map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Control.extend({\n\n    options: {\n        position: \"topleft\",\n        exitText: 'Salir pantalla completa',\n        fullText: \"Ver en pantalla completa\"\n    },\n\n    initialize: function (options?: { position?: ControlPosition, exitText?: string }) {\n        Util.setOptions(this, options);\n    },\n    onAdd: function () {\n        const container = DomUtil.create(\n            \"input\",\n            \"leaflet-control-zoom leaflet-bar leaflet-control\"\n        );\n        container.type = \"button\";\n        container.title = this.options.fullText;\n        container.style.backgroundImage =\n            \"url(https://cdn-icons-png.flaticon.com/512/2089/2089670.png)\";\n        container.style.backgroundSize = \"15px 15px\";\n        container.style.backgroundRepeat = \"no-repeat\";\n        container.style.backgroundPosition = \"50% 50%\";\n        container.style.width = \"32px\";\n        container.style.height = \"32px\";\n        container.style.padding = \"12px\";\n        container.style.lineHeight = \"30px\";\n        container.style.fontSize = \"22px\";\n        container.style.fontWeight = \"bold\";\n        container.style.cursor = \"pointer\";\n\n\n        container.onclick = () => {\n            // https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n            if (!document.fullscreenElement) { // Si no estamos a pantalla completa\n                document.getElementById('map')?.requestFullscreen();\n                container.title = this.options.exitText;\n            } else {\n                document.exitFullscreen();\n                container.title = this.options.fullText;\n            }\n        };\n        return container;\n    },\n})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PLACES_LIST_LOCATIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/mugan86/ng-leaflet/src/lib/examples/locations/world.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    ADDIS_ABEBA_ETIOPIA: [8.9674055, 38.7896463],\n    BARCELONA: [41.3926467, 2.0701492],\n    BOGOTA_COLOMBIA: [4.7109877, -74.1071116],\n    CARACAS_VENEZUELA: [10.4668323, -66.9081806],\n    CASABLANCA: [33.5765585, -7.5969511],\n    FLORENCIA: [43.7876803, 11.2339399],\n    HONOLULU_HAWAI_EEUU: [21.3320135, -157.8287631],\n    LONDRES_GRAN_BRETAÑA: [51.5285582, -0.2416809],\n    LOS_ANGELES_EEUU: [34.0201613, -118.6919198],\n    MADRID: [40.4378698, -3.8196205],\n    MANILA_FILIPINAS: [14.5964957, 120.9445402],\n    MOSCU_RUSIA: [55.7535874, 37.546607],\n    PARIS_FRANCIA: [48.8588377, 2.2770203],\n    SAN_FRANCISCO_EEUU: [37.754894, -122.4290677],\n    SEVILLA: [37.3753501, -6.0250982],\n    SORALUZE: [43.1736976, -2.4173474],\n    TAIPEI_TAIWAN: [25.0171608, 121.3662924],\n    TOKIO_JAPON: [35.6681625, 139.6007832],\n    VALENCIA: [39.4669627, -0.4352962],\n    VENECIA_ITALIA: [45.4374999, 12.3319962],\n    VITORIA_GASTEIZ: [42.8540316, -2.7121775],\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/mugan86/ng-leaflet/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Second",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/stories/01-Basic/C-RandomMarkers.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/stories/01-Basic/A-Map.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MapComponent>",
                "defaultValue": "(args: MapComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/stories/01-Basic/B-MapCustomSize.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MapComponent>",
                "defaultValue": "(args: MapComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/stories/01-Basic/C-RandomMarkers.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MapComponent>",
                "defaultValue": "(args: MapComponent) => ({\n    props: args,\n})"
            },
            {
                "name": "tileLayers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/mugan86/ng-leaflet/src/lib/config/tile-layers/ui.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    baseLayers: {\n        default: {\n            map: 'https://{s}.tile.osm.org/{z}/{x}/{y}.png',\n            atribution: ATRIBUTIONS_LIST.OSM,\n        },\n        osmManik: {\n            map: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n            atribution: ATRIBUTIONS_LIST.OSM,\n        },\n        osmDE: {\n            map: 'https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png',\n            atribution: ATRIBUTIONS_LIST.OSM,\n        },\n        osmHot: {\n            map: 'http://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png',\n            atribution: ATRIBUTIONS_LIST.OSMHot,\n        },\n        openTopoMap: {\n            map: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',\n            atribution: ATRIBUTIONS_LIST.OpenTopo,\n        },\n        stadia: {\n            map: {\n                AlidadeSmooth:\n                    'https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png',\n                AlidadeSmoothDark:\n                    'https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png',\n                OsmBright:\n                    'https://tiles.stadiamaps.com/tiles/osm_bright/{z}/{x}/{y}{r}.png',\n                Outdoors:\n                    'https://tiles.stadiamaps.com/tiles/outdoors/{z}/{x}/{y}{r}.png',\n            },\n            atribution: ATRIBUTIONS_LIST.Stadia,\n        },\n        cycloOsm: {\n            map: 'https://{s}.tile-cyclosm.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png',\n            atribution: ATRIBUTIONS_LIST.CyclOSM,\n        },\n        esri: {\n            worldStreetMap: {\n                map: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}',\n                atribution: ATRIBUTIONS_LIST.EsriWorldTopoMap,\n            },\n            worldImagery: {\n                map: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n                atribution: ATRIBUTIONS_LIST.EsriWorldImagery,\n            },\n        },\n        cartoDb: {\n            map: {\n                positron:\n                    'https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png',\n                positronNoLabels:\n                    'https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}{r}.png',\n                voyager:\n                    'https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png',\n            },\n            atribution: ATRIBUTIONS_LIST.CartoDb,\n        },\n        usgsUs: {\n            map: {\n                topo: 'https://basemap.nationalmap.gov/arcgis/rest/services/USGSTopo/MapServer/tile/{z}/{y}/{x}',\n                imagery:\n                    'https://basemap.nationalmap.gov/arcgis/rest/services/USGSImageryOnly/MapServer/tile/{z}/{y}/{x}',\n            },\n            atribution: ATRIBUTIONS_LIST.USGS,\n        }\n    },\n    overlayers: {\n        openSeaMap: 'https://tiles.openseamap.org/seamark/{z}/{x}/{y}.png',\n        openPtMap: 'http://openptmap.org/tiles/{z}/{x}/{y}.png',\n        openRailway:\n            'https://{s}.tiles.openrailwaymap.org/standard/{z}/{x}/{y}.png',\n        wayMarkedTrails: {\n            hiking: 'https://tile.waymarkedtrails.org/hiking/{z}/{x}/{y}.png',\n            cycling: 'https://tile.waymarkedtrails.org/cycling/{z}/{x}/{y}.png',\n            mtb: 'https://tile.waymarkedtrails.org/mtb/{z}/{x}/{y}.png',\n            slopes: 'https://tile.waymarkedtrails.org/slopes/{z}/{x}/{y}.png',\n        },\n        openSnowMap: 'https://tiles.opensnowmap.org/pistes/{z}/{x}/{y}.png',\n    }\n}"
            },
            {
                "name": "tileLayerSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/mugan86/ng-leaflet/src/lib/config/tile-layers/helpers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n    layer: string = tileLayers.baseLayers.cartoDb.map.positron,\n    options: ITilerLayerOptions = {\n        minZoom: 0,\n        maxZoom: 20,\n        attribution: tileLayers.baseLayers.default.atribution\n    }\n) => {\n    return tileLayer(layer, options);\n}"
            },
            {
                "name": "tileLayersWMS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/mugan86/ng-leaflet/src/lib/config/tile-layers/ui.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    ign: {\n        baseUrl: 'https://www.ign.es/wms-inspire/ign-base?',\n        layers: {\n            baseOrto: 'IGNBaseOrto',\n            baseTodo: 'IGNBaseTodo',\n            baseTodoGris: 'IGNBaseTodo-gris',\n            baseTodoNoFondo: 'IGNBaseTodo-nofondo'\n        }\n    },\n    mundialis: {\n        baseUrl: 'http://ows.mundialis.de/services/service?',\n        layers: {\n            dark: 'Dark',\n            osmWMS: 'OSM-WMS',\n            osmOverlayWMS: 'OSM-Overlay-WMS',\n            topoWMS: 'TOPO-WMS',\n            topoOsmWMS: 'TOPO-OSM-WMS',\n            srtmThirtyHillshade: 'SRTM30-Hillshade',\n            srtmThirtyColored: 'SRTM30-Colored',\n            srtmThirtyColoredHillshade: 'SRTM30-Colored-Hillshade'\n        },\n    },\n}"
            },
            {
                "name": "tileLayerWMSSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/mugan86/ng-leaflet/src/lib/config/tile-layers/helpers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n    service: string = tileLayersWMS.mundialis.baseUrl,\n    options : ITilerLayerOptions = {\n        minZoom: 0,\n        maxZoom: 20,\n        attribution: tileLayers.baseLayers.default.atribution,\n        layers: tileLayersWMS.mundialis.layers.topoOsmWMS,\n        format: 'image/png',\n        transparent: true,\n    }\n) => {\n    return tileLayer.wms(service, options);\n}"
            },
            {
                "name": "W50Per200px",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/stories/01-Basic/B-MapCustomSize.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "W50Per500px",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/stories/01-Basic/B-MapCustomSize.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "W80Per300px",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/stories/01-Basic/B-MapCustomSize.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "watermark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/mugan86/ng-leaflet/src/lib/plugins/controls/watermark.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(options?: {\n    position?: ControlPosition, img?: string, border?: boolean\n}) => new Watermark(options)"
            },
            {
                "name": "Watermark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/mugan86/ng-leaflet/src/lib/plugins/controls/watermark.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Control.extend({\n\n    options: {\n        position: 'bottomleft',\n        img: 'https://raw.githubusercontent.com/leaflet-maps-course/resources/main/logotypes/am.png',\n        border: false,\n        size: '60px',\n        borderColor: '#506bff'\n    },\n\n    initialize: function(options: {\n        position: ControlPosition, img: string, border: boolean\n    }) {\n        Util.setOptions(this, options);\n    },\n    onAdd: function() {\n        const img = DomUtil.create('img');\n\n        img.src = this.options.img;\n        img.style.width = this.options.size;\n        if (this.options.border) {\n            img.style.borderBottom = `3px solid ${this.options.borderColor}`;\n        }\n\n        return img;\n    },\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/configurations/index.ts": [
                {
                    "name": "appModule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/configurations/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n  import { NgLeafletModule } from '@mugan86/ng-leaflet';\n  import { NgModule } from '@angular/core';\n  import { BrowserModule } from '@angular/platform-browser';\n  \n  import { AppComponent } from './app.component';\n  \n  @NgModule({\n    declarations: [\n      AppComponent\n    ],\n    imports: [\n      BrowserModule,\n      NgLeafletModule\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n  })\n  export class AppModule { }`"
                }
            ],
            "projects/mugan86/ng-leaflet/src/lib/config/tile-layers/ui.ts": [
                {
                    "name": "ATRIBUTIONS_LIST",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/mugan86/ng-leaflet/src/lib/config/tile-layers/ui.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    CartoDb:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n    CyclOSM:\n        '<a href=\"https://github.com/cyclosm/cyclosm-cartocss-style/releases\" title=\"CyclOSM - Open Bicycle render\">CyclOSM</a> | Map data: &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    EsriWorldImagery:\n        'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',\n    EsriWorldTopoMap:\n        'Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ, TomTom, Intermap, iPC, USGS, FAO, NPS, NRCAN, GeoBase, Kadaster NL, Ordnance Survey, Esri Japan, METI, Esri China (Hong Kong), and the GIS User Community',\n    OSM: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    OSMHot:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, Tiles style by <a href=\"https://www.hotosm.org/\" target=\"_blank\">Humanitarian OpenStreetMap Team</a> hosted by <a href=\"https://openstreetmap.fr/\" target=\"_blank\">OpenStreetMap France</a>',\n    OpenTopo:\n        'Map data: &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | Map style: &copy; <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)',\n    Stadia:\n        '&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\n    USGS: 'Tiles courtesy of the <a href=\"https://usgs.gov/\">U.S. Geological Survey</a>',\n}"
                },
                {
                    "name": "tileLayers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/mugan86/ng-leaflet/src/lib/config/tile-layers/ui.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    baseLayers: {\n        default: {\n            map: 'https://{s}.tile.osm.org/{z}/{x}/{y}.png',\n            atribution: ATRIBUTIONS_LIST.OSM,\n        },\n        osmManik: {\n            map: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n            atribution: ATRIBUTIONS_LIST.OSM,\n        },\n        osmDE: {\n            map: 'https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png',\n            atribution: ATRIBUTIONS_LIST.OSM,\n        },\n        osmHot: {\n            map: 'http://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png',\n            atribution: ATRIBUTIONS_LIST.OSMHot,\n        },\n        openTopoMap: {\n            map: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',\n            atribution: ATRIBUTIONS_LIST.OpenTopo,\n        },\n        stadia: {\n            map: {\n                AlidadeSmooth:\n                    'https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png',\n                AlidadeSmoothDark:\n                    'https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png',\n                OsmBright:\n                    'https://tiles.stadiamaps.com/tiles/osm_bright/{z}/{x}/{y}{r}.png',\n                Outdoors:\n                    'https://tiles.stadiamaps.com/tiles/outdoors/{z}/{x}/{y}{r}.png',\n            },\n            atribution: ATRIBUTIONS_LIST.Stadia,\n        },\n        cycloOsm: {\n            map: 'https://{s}.tile-cyclosm.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png',\n            atribution: ATRIBUTIONS_LIST.CyclOSM,\n        },\n        esri: {\n            worldStreetMap: {\n                map: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}',\n                atribution: ATRIBUTIONS_LIST.EsriWorldTopoMap,\n            },\n            worldImagery: {\n                map: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n                atribution: ATRIBUTIONS_LIST.EsriWorldImagery,\n            },\n        },\n        cartoDb: {\n            map: {\n                positron:\n                    'https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png',\n                positronNoLabels:\n                    'https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}{r}.png',\n                voyager:\n                    'https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png',\n            },\n            atribution: ATRIBUTIONS_LIST.CartoDb,\n        },\n        usgsUs: {\n            map: {\n                topo: 'https://basemap.nationalmap.gov/arcgis/rest/services/USGSTopo/MapServer/tile/{z}/{y}/{x}',\n                imagery:\n                    'https://basemap.nationalmap.gov/arcgis/rest/services/USGSImageryOnly/MapServer/tile/{z}/{y}/{x}',\n            },\n            atribution: ATRIBUTIONS_LIST.USGS,\n        }\n    },\n    overlayers: {\n        openSeaMap: 'https://tiles.openseamap.org/seamark/{z}/{x}/{y}.png',\n        openPtMap: 'http://openptmap.org/tiles/{z}/{x}/{y}.png',\n        openRailway:\n            'https://{s}.tiles.openrailwaymap.org/standard/{z}/{x}/{y}.png',\n        wayMarkedTrails: {\n            hiking: 'https://tile.waymarkedtrails.org/hiking/{z}/{x}/{y}.png',\n            cycling: 'https://tile.waymarkedtrails.org/cycling/{z}/{x}/{y}.png',\n            mtb: 'https://tile.waymarkedtrails.org/mtb/{z}/{x}/{y}.png',\n            slopes: 'https://tile.waymarkedtrails.org/slopes/{z}/{x}/{y}.png',\n        },\n        openSnowMap: 'https://tiles.opensnowmap.org/pistes/{z}/{x}/{y}.png',\n    }\n}"
                },
                {
                    "name": "tileLayersWMS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/mugan86/ng-leaflet/src/lib/config/tile-layers/ui.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    ign: {\n        baseUrl: 'https://www.ign.es/wms-inspire/ign-base?',\n        layers: {\n            baseOrto: 'IGNBaseOrto',\n            baseTodo: 'IGNBaseTodo',\n            baseTodoGris: 'IGNBaseTodo-gris',\n            baseTodoNoFondo: 'IGNBaseTodo-nofondo'\n        }\n    },\n    mundialis: {\n        baseUrl: 'http://ows.mundialis.de/services/service?',\n        layers: {\n            dark: 'Dark',\n            osmWMS: 'OSM-WMS',\n            osmOverlayWMS: 'OSM-Overlay-WMS',\n            topoWMS: 'TOPO-WMS',\n            topoOsmWMS: 'TOPO-OSM-WMS',\n            srtmThirtyHillshade: 'SRTM30-Hillshade',\n            srtmThirtyColored: 'SRTM30-Colored',\n            srtmThirtyColoredHillshade: 'SRTM30-Colored-Hillshade'\n        },\n    },\n}"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/mugan86/ng-leaflet/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/mugan86/ng-leaflet/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/mugan86/ng-leaflet/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/stories/01-Basic/A-Map.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/stories/01-Basic/A-Map.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/stories/01-Basic/A-Map.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MapComponent>",
                    "defaultValue": "(args: MapComponent) => ({\n    props: args,\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "projects/mugan86/ng-leaflet/src/lib/plugins/controls/full-screen-map.ts": [
                {
                    "name": "fullScreenMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/mugan86/ng-leaflet/src/lib/plugins/controls/full-screen-map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(options?: {\n    position?: ControlPosition, entryText?: string, exitText?: string\n}) => new FullScreenMap(options)"
                },
                {
                    "name": "FullScreenMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/mugan86/ng-leaflet/src/lib/plugins/controls/full-screen-map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Control.extend({\n\n    options: {\n        position: \"topleft\",\n        exitText: 'Salir pantalla completa',\n        fullText: \"Ver en pantalla completa\"\n    },\n\n    initialize: function (options?: { position?: ControlPosition, exitText?: string }) {\n        Util.setOptions(this, options);\n    },\n    onAdd: function () {\n        const container = DomUtil.create(\n            \"input\",\n            \"leaflet-control-zoom leaflet-bar leaflet-control\"\n        );\n        container.type = \"button\";\n        container.title = this.options.fullText;\n        container.style.backgroundImage =\n            \"url(https://cdn-icons-png.flaticon.com/512/2089/2089670.png)\";\n        container.style.backgroundSize = \"15px 15px\";\n        container.style.backgroundRepeat = \"no-repeat\";\n        container.style.backgroundPosition = \"50% 50%\";\n        container.style.width = \"32px\";\n        container.style.height = \"32px\";\n        container.style.padding = \"12px\";\n        container.style.lineHeight = \"30px\";\n        container.style.fontSize = \"22px\";\n        container.style.fontWeight = \"bold\";\n        container.style.cursor = \"pointer\";\n\n\n        container.onclick = () => {\n            // https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n            if (!document.fullscreenElement) { // Si no estamos a pantalla completa\n                document.getElementById('map')?.requestFullscreen();\n                container.title = this.options.exitText;\n            } else {\n                document.exitFullscreen();\n                container.title = this.options.fullText;\n            }\n        };\n        return container;\n    },\n})"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "projects/mugan86/ng-leaflet/src/lib/examples/locations/world.ts": [
                {
                    "name": "PLACES_LIST_LOCATIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/mugan86/ng-leaflet/src/lib/examples/locations/world.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    ADDIS_ABEBA_ETIOPIA: [8.9674055, 38.7896463],\n    BARCELONA: [41.3926467, 2.0701492],\n    BOGOTA_COLOMBIA: [4.7109877, -74.1071116],\n    CARACAS_VENEZUELA: [10.4668323, -66.9081806],\n    CASABLANCA: [33.5765585, -7.5969511],\n    FLORENCIA: [43.7876803, 11.2339399],\n    HONOLULU_HAWAI_EEUU: [21.3320135, -157.8287631],\n    LONDRES_GRAN_BRETAÑA: [51.5285582, -0.2416809],\n    LOS_ANGELES_EEUU: [34.0201613, -118.6919198],\n    MADRID: [40.4378698, -3.8196205],\n    MANILA_FILIPINAS: [14.5964957, 120.9445402],\n    MOSCU_RUSIA: [55.7535874, 37.546607],\n    PARIS_FRANCIA: [48.8588377, 2.2770203],\n    SAN_FRANCISCO_EEUU: [37.754894, -122.4290677],\n    SEVILLA: [37.3753501, -6.0250982],\n    SORALUZE: [43.1736976, -2.4173474],\n    TAIPEI_TAIWAN: [25.0171608, 121.3662924],\n    TOKIO_JAPON: [35.6681625, 139.6007832],\n    VALENCIA: [39.4669627, -0.4352962],\n    VENECIA_ITALIA: [45.4374999, 12.3319962],\n    VITORIA_GASTEIZ: [42.8540316, -2.7121775],\n}"
                }
            ],
            "src/app/stories/01-Basic/C-RandomMarkers.stories.ts": [
                {
                    "name": "Second",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/stories/01-Basic/C-RandomMarkers.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/stories/01-Basic/C-RandomMarkers.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MapComponent>",
                    "defaultValue": "(args: MapComponent) => ({\n    props: args,\n})"
                }
            ],
            "src/app/stories/01-Basic/B-MapCustomSize.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/stories/01-Basic/B-MapCustomSize.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MapComponent>",
                    "defaultValue": "(args: MapComponent) => ({\n    props: args,\n})"
                },
                {
                    "name": "W50Per200px",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/stories/01-Basic/B-MapCustomSize.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "W50Per500px",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/stories/01-Basic/B-MapCustomSize.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "W80Per300px",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/stories/01-Basic/B-MapCustomSize.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "projects/mugan86/ng-leaflet/src/lib/config/tile-layers/helpers.ts": [
                {
                    "name": "tileLayerSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/mugan86/ng-leaflet/src/lib/config/tile-layers/helpers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n    layer: string = tileLayers.baseLayers.cartoDb.map.positron,\n    options: ITilerLayerOptions = {\n        minZoom: 0,\n        maxZoom: 20,\n        attribution: tileLayers.baseLayers.default.atribution\n    }\n) => {\n    return tileLayer(layer, options);\n}"
                },
                {
                    "name": "tileLayerWMSSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/mugan86/ng-leaflet/src/lib/config/tile-layers/helpers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n    service: string = tileLayersWMS.mundialis.baseUrl,\n    options : ITilerLayerOptions = {\n        minZoom: 0,\n        maxZoom: 20,\n        attribution: tileLayers.baseLayers.default.atribution,\n        layers: tileLayersWMS.mundialis.layers.topoOsmWMS,\n        format: 'image/png',\n        transparent: true,\n    }\n) => {\n    return tileLayer.wms(service, options);\n}"
                }
            ],
            "projects/mugan86/ng-leaflet/src/lib/plugins/controls/watermark.ts": [
                {
                    "name": "watermark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/mugan86/ng-leaflet/src/lib/plugins/controls/watermark.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(options?: {\n    position?: ControlPosition, img?: string, border?: boolean\n}) => new Watermark(options)"
                },
                {
                    "name": "Watermark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/mugan86/ng-leaflet/src/lib/plugins/controls/watermark.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Control.extend({\n\n    options: {\n        position: 'bottomleft',\n        img: 'https://raw.githubusercontent.com/leaflet-maps-course/resources/main/logotypes/am.png',\n        border: false,\n        size: '60px',\n        borderColor: '#506bff'\n    },\n\n    initialize: function(options: {\n        position: ControlPosition, img: string, border: boolean\n    }) {\n        Util.setOptions(this, options);\n    },\n    onAdd: function() {\n        const img = DomUtil.create('img');\n\n        img.src = this.options.img;\n        img.style.width = this.options.size;\n        if (this.options.border) {\n            img.style.borderBottom = `3px solid ${this.options.borderColor}`;\n        }\n\n        return img;\n    },\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "example/:page",
                        "loadChildren": "./pages/example/example.module#ExampleModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/example/example-routing.module.ts",
                                        "module": "ExampleRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "ExampleComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "ExampleModule"
                            }
                        ]
                    },
                    {
                        "path": "storybook",
                        "loadChildren": "./pages/storybook/map/map.module#MapModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pages/storybook/map/map-routing.module.ts",
                                        "module": "MapRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "MapComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "MapModule"
                            }
                        ]
                    },
                    {
                        "path": "**",
                        "redirectTo": "storybook",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 4,
        "status": "low",
        "files": [
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/components/map/map.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapComponent",
                "coveragePercent": 54,
                "coverageCount": "6/11",
                "status": "good"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/config/tile-layers/helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tileLayerSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/config/tile-layers/helpers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tileLayerWMSSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/config/tile-layers/ui.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ATRIBUTIONS_LIST",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/config/tile-layers/ui.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tileLayers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/config/tile-layers/ui.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tileLayersWMS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/examples/locations/world.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PLACES_LIST_LOCATIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/models/config-map.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IConfigMap",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/models/config-map.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISizeMap",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/models/controls.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBaseLayer",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/models/controls.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILayers",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/models/controls.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IOverLayer",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/models/controls.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IScaleOptions",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/models/controls.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IWatermarkOptions",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/models/controls.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IZoomOptions",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/models/marker.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMarker",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/models/tile-layer-options.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITilerLayerOptions",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/plugins/controls/full-screen-map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fullScreenMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/plugins/controls/full-screen-map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullScreenMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/plugins/controls/watermark.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "watermark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/plugins/controls/watermark.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Watermark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/services/controls.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Controls",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/services/map.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseMap",
                "coveragePercent": 20,
                "coverageCount": "2/10",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/services/markers.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Markers",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/lib/services/ng-leaflet-map.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LeafletMap",
                "coveragePercent": 20,
                "coverageCount": "2/10",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/mugan86/ng-leaflet/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/app.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/configurations/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appModule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/storybook/map/map.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/stories/01-Basic/A-Map.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/stories/01-Basic/A-Map.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/stories/01-Basic/B-MapCustomSize.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/stories/01-Basic/B-MapCustomSize.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "W50Per200px",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/stories/01-Basic/B-MapCustomSize.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "W50Per500px",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/stories/01-Basic/B-MapCustomSize.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "W80Per300px",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/stories/01-Basic/C-RandomMarkers.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Second",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/stories/01-Basic/C-RandomMarkers.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}